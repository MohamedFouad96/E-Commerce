plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "sa.edu.twuaiq.e_commerce"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


    /**
     * View binding is a feature that allows you to more easily write code that interacts with views.
     * Once view binding is enabled in a module,
     * it generates a binding class for each XML layout file present in that module.
     * An instance of a binding class contains direct references to all views that have an ID in the corresponding layout.
     * */

    /***
     * If view binding is enabled for a module,
     * a binding class is generated for each XML layout file that the module contains.
     * Each binding class contains references to the root view and all views that have an ID.
     * The name of the binding class is generated by converting
     * the name of the XML file to Pascal case and adding the word "Binding" to the end.
     * */
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    // To use Room local database in your app, You need the following dependencies:
    implementation "androidx.room:room-runtime:2.3.0"
    implementation "androidx.room:room-ktx:2.3.0"
    kapt "androidx.room:room-compiler:2.3.0"


    // To use Retrofit for remote datasource in your app, You need the following dependencies:
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'


    // To use Picasso online image loading framework in your app, You need the following dependencies:
    implementation 'com.squareup.picasso:picasso:2.71828'

    // To use Coroutines in your app, You need the following dependencies:
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'

    // To use navigation component fragments, You need the following dependencies:
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    // To use viewModel, You need the following dependency:
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"

    // To use livedata, You need the following dependency:
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"

    // To use Matisse image picker in your app, You need the following dependencies:
    implementation 'com.zhihu.android:matisse:0.5.3-beta3'

    // To use Glide online image loading framework in your app, You need the following dependencies:
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

}